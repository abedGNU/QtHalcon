#include "calibrationui.h"


CalibrationUi::CalibrationUi(QWidget *parent) :
    QWidget(parent)
{
    setupUi(this);
    hwind = new QHWindow();
    vlHwindows->addWidget(hwind);
    hwind->show();
    //    framegrab.OpenFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default", -1, "default", -1,
    //                                           "false", "default", "camera3", 0, -1);
    //    StartCamPar = (HalconCpp::HTuple)LE_focus->text().toStdString().c_str();
    //    StartCamPar.Append((HalconCpp::HTuple)LE_kappa->text().toStdString().c_str());
    //    StartCamPar.Append((HalconCpp::HTuple)LE_Sx->text().toStdString().c_str());
    //    StartCamPar.Append((HalconCpp::HTuple)LE_Sy->text().toStdString().c_str());
    //    StartCamPar.Append(hwind->height()/2);
    //    StartCamPar.Append(hwind->width()/2);
    //    StartCamPar.Append(hwind->height());
    //    StartCamPar.Append(hwind->width());

    cmbCamera->addItems(Explorer::ActiveCamera.keys());
}



void CalibrationUi::on_pb_calibrate_clicked()
{

}

void CalibrationUi::on_pb_calibration_clicked()
{
    try{
        //        HObject  ho_Image;

        //        // Local control variables
        //        HTuple  hv_AcqHandle;

        //        //Image Acquisition 01: Code generated by Image Acquisition 01
        //        OpenFramegrabber("GigEVision", 0, 0, 0, 0, 0, 0, "default", -1, "default", -1,
        //            "false", "default", "va", 0, -1, &hv_AcqHandle);
        //        GrabImageStart(hv_AcqHandle, -1);

        //          GrabImageAsync(&ho_Image, hv_AcqHandle, -1);
        //          DispObj(ho_Image,hv_AcqHandle);
        //          //Image Acquisition 01: Do something
        //        }
        //        CloseFramegrabber(hv_AcqHandle);

        HalconCpp::HImage img;
        double focus,Sx,Sy;
        int i = 0;
        ++i;
        //Camera cam("camera3","dumpCamName","GigEVision","default");


        //    framegrab.GrabImageStart(-1);
        //    img = framegrab.GrabImage();


        img=Explorer::ActiveCamera.value(cmbCamera->currentText())->GrabImage() ;
        hwind->showImage(img);
        qDebug()<<"Image grabbed from"<< Explorer::ActiveCamera.value(cmbCamera->currentText())->deviceName;

        // img = cam.GrabImage().Clone();
        focus = LE_focus->text().toDouble()/1000;
        Sx = LE_Sx->text().toDouble()/1000000;
        Sy = LE_Sy->text().toDouble()/1000000;

        StartCamPar.Clear();
        //    StartCamPar = (HalconCpp::HTuple)focus;
        //    StartCamPar.Append((HalconCpp::HTuple)LE_kappa->text().toStdString().c_str());
        //    StartCamPar.Append((HalconCpp::HTuple)Sx);
        //    StartCamPar.Append((HalconCpp::HTuple)Sy);
        //    double v = img.Width()/2;

        //    StartCamPar.Append(img.Width()/2);

        //    te_calibrationfilename->append(QString::number(v));
        //            StartCamPar.Append(img.Height()/2);
        //    StartCamPar.Append(img.Width());
        //    StartCamPar.Append(img.Height());
        StartCamPar[0] = 0.008;
        StartCamPar[1] = 0;
        StartCamPar[2] = 0.0000022;
        StartCamPar[3] = 0.0000022;
        StartCamPar[4] = 1296;
        StartCamPar[5] = 972;
        StartCamPar[6] = 2592;
        StartCamPar[7] = 1944;
        qDebug()<<"Start camera paramter" << StartCamPar.ToString();

        calibrationset();
        calibration(i);
    }
    catch(HalconCpp::HException& ex)
    {
        Global::HExceptio(ex);
    }
}

void CalibrationUi::calibrationset()
{
    try{
        caltemp.CreateCalibData("calibration_object",1,1);
        caltemp.SetCalibDataCamParam(0,"area_scan_division",StartCamPar);
        HalconCpp::HTuple CalibObjDescr = HalconCpp::HTuple(fileNameDescr.toStdString().c_str());
        qDebug()<< "" << CalibObjDescr.ToString();
        caltemp.SetCalibDataCalibObject(0,CalibObjDescr);

    }
    catch(HalconCpp::HException& ex)
    {
        Global::HExceptio(ex);
    }
}

void CalibrationUi::calibration(int i)
{
    //    image = cam.GrabImage();
    hwind->showImage(image);
    caltemp.FindCalibObject(image,0,0,i,"","");
    calcont = caltemp.GetCalibDataObservContours("caltab",0,0,i);
    hwind->SetColor("green");
    hwind->DispObj(calcont);



}

void CalibrationUi::on_pb_readcalibrationfile_clicked()
{
    QStringList calname;

    QString filename = QFileDialog::getOpenFileName(this,tr("Open file"),
                                                    ".",tr("Files (*.descr)"));
    QTextCodec *code = QTextCodec::codecForName("gb18030");//添加这一句支持中文路径和文件名
    QString name = code->fromUnicode(filename).data();
    te_calibrationfilename->setText(name);
    calname = name.split("/");
    calibname = calname[calname.size()-1];
    te_calibrationfilename->append(calibname);
fileNameDescr= name;


}

void CalibrationUi::on_pbGrab_clicked()
{

    //Camera cam("camera3","dumpCamName","GigEVision","default");
    hwind->showImage(Explorer::ActiveCamera.value(cmbCamera->currentText())->GrabImage());
}


